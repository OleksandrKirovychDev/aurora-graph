package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"aurora-graph/gateway/graph/model"
	"context"
	"time"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, account model.RegisterInput) (*model.AuthResponse, error) {
	token, err := r.AccountClient.Register(ctx, account.Name, account.Email, account.Password)
	if err != nil {
		return nil, err
	}
	return &model.AuthResponse{Token: token}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, account model.LoginInput) (*model.AuthResponse, error) {
	token, err := r.AccountClient.Login(ctx, account.Email, account.Password)
	if err != nil {
		return nil, err
	}
	return &model.AuthResponse{Token: token}, nil
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, pagination *model.PaginationInput, id *int32) ([]*model.Account, error) {
	if id != nil {
		acc, err := r.AccountClient.GetAccount(ctx, uint64(*id))
		if err != nil {
			return nil, err
		}

		var createdAt, updatedAt *string
		if acc.CreatedAt != nil {
			s := acc.CreatedAt.Format(time.RFC3339)
			createdAt = &s
		}
		if acc.UpdatedAt != nil {
			s := acc.UpdatedAt.Format(time.RFC3339)
			updatedAt = &s
		}

		return []*model.Account{{
			ID:        int32(acc.ID),
			Email:     acc.Email,
			Name:      acc.Name,
			CreatedAt: createdAt,
			UpdatedAt: updatedAt,
		}}, nil
	}

	var skip, take uint64
	if pagination != nil {
		skip = uint64(pagination.Skip)
		take = uint64(pagination.Take)
	}

	accs, err := r.AccountClient.GetAccounts(ctx, skip, take)
	if err != nil {
		return nil, err
	}

	var result []*model.Account
	for _, a := range accs {
		result = append(result, &model.Account{
			ID:    int32(a.ID),
			Email: a.Email,
			Name:  a.Name,
		})
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
